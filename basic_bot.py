#Neural networks, Training data, GAN generative adversial networks, VAN Variational Autoencoders, weight optimisations(Generative AI)
#Auto regressors: generate tokens based on previous training(better for generation)
#Auto encoders: generates tokens by taking teh beside tokens into consideration(better for analysis and similar stuff)
#Trust 2,3 lines at your own risk

import openai
openai.api_key=
#prompt =  input("what is your question? ")

#creating the response by sending the prompt and the parameters to the model, temperature= sort of measure of randomization of the outputs, <2.0
"""response=openai.Completion.create(          
    engine=engine,
    prompt=prompt,
    temperature=0.05,
    max_tokens=100
)
print(response)
print(response['choices'][0].text.strip())"""
#2nd code 
#have to use different model from the previosu one to assign roles liek system, user
#system: how we want the model to primarily focus on
#user: interacts with the model
##Disclaimer: He asked us to correct grammer of teh input, well i wanted it to summarize data
response=openai.ChatCompletion.create(
model = "gpt-3.5-turbo",
messages = [
    {
        "role":"system",
        "content":"Summarize the given input"
    },
    {
        "role":"user",
        "content":"""In Python, all exceptions must be instances of a class that derives from BaseException. In a try statement with an except clause that mentions a particular class, that clause also handles any exception classes derived from that class (but not exception classes from which it is derived). Two exception classes that are not related via subclassing are never equivalent, even if they have the same name.

The built-in exceptions listed below can be generated by the interpreter or built-in functions. Except where mentioned, they have an “associated value” indicating the detailed cause of the error. This may be a string or a tuple of several items of information (e.g., an error code and a string explaining the code). The associated value is usually passed as arguments to the exception class’s constructor.

User code can raise built-in exceptions. This can be used to test an exception handler or to report an error condition “just like” the situation in which the interpreter raises the same exception; but beware that there is nothing to prevent user code from raising an inappropriate error.

The built-in exception classes can be subclassed to define new exceptions; programmers are encouraged to derive new exceptions from the Exception class or one of its subclasses, and not from BaseException. More information on defining exceptions is available in the Python Tutorial under User-defined Exceptions."""
    }

],
temperature = 0.4,
max_tokens = 120,
top_p=1,
frequency_penalty=0.7,
presence_penalty = 0.4
)
#top_p = how diverse the outputs will be
#frequency_p: penalizes the frequency o fteokens generated(maybe reduces the frequency of repition)
#presenec_p: sort of liek frequency_p
print(response.choices[0]['message']['content'].strip()) 
